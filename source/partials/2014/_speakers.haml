%section#speakers
  .wrapper
    %h1.heading
      %a{:name=>"speakers"}
      %span Speakers

    %ul
      %li.speaker
        .rounded
          %a{href: '#speaker1', rel: 'speaker_image', class: 'fancybox'}
            = image_tag "speakers/2014/charlene.jpg"
          %a{:href=>"https://twitter.com/charlymul", :class=>"twitter"}= image_tag "twitter.png"
          %a{:href=>"https://github.com/nathilen", :class=>"github"}= image_tag "github.png"
        %h2
          %a{href: '#speaker1', rel: 'speakers', class: 'fancybox'} Charlene Tshitoka
        %p Software Development in Africa

        #speaker1.detail
          .links.right
            %a{:href=>"https://twitter.com/charlymul", :class=>"twitter"}= image_tag "twitter.png"
            %a{:href=>"https://github.com/nathilen", :class=>"github"}= image_tag "github.png"
          .name
            = image_tag "speakers/2014/charlene.jpg"
            %h2 Charlene Tshitoka
          .inner
            %p Charlene is a developer who has recently started questioning whether there is really such a thing called devops. Between working with configuration management tools and orchestration frameworks, she has discovered there is a ruby community out there. Charlene has been trying to infiltrate it since then.  She is currently part of the ThoughtWorks team.
            %h3 Software Development in Africa
            %p Software development has gone through many upheavals and downhills to what it is currently. Still, it remains an impressive creation that is changing the lifestyles of many. Africa, on the other side, has a history that is yet to fully captivate many of its own people. So what could “software development” and “Africa” be doing in the same phrase?
            %p Being passionate about code and enjoying a love-hate relationship with my continent, I will share how these words resonate with me. I will discuss some of the achievements and also challenges of developing software in Africa, my fears and hopes too. Let’s have a conversation on what these words mean for us; software development and Africa put together.

      %li.speaker
        .rounded
          %a{href: '#speaker3', rel: 'speaker_image', class: 'fancybox'}
            = image_tag "speakers/2014/andre.jpg"
          %a{:href=>"https://twitter.com/indirect", :class=>"twitter"}= image_tag "twitter.png"
          %a{:href=>"https://github.com/indirect", :class=>"github"}= image_tag "github.png"
        %h2
          %a{href: '#speaker3', rel: 'speakers', class: 'fancybox'} André Arko
        %p Extreme Makeover: Rubygems Edition

        #speaker3.detail
          .links.right
            %a{:href=>"https://twitter.com/indirect", :class=>"twitter"}= image_tag "twitter.png"
            %a{:href=>"https://github.com/indirect", :class=>"github"}= image_tag "github.png"
          .name
            = image_tag "speakers/2014/andre.jpg"
            %h2 André Arko
          .inner
            %p André thinks Ruby is pretty cool. He designs and builds web applications at Cloud City Development by day, and works on Bundler and Rubygems by night… and also some days.
            %h3 Extreme Makeover: Rubygems Edition
            %p Rubygems.org provides every Rubyist with an amazing service: all the libraries in the Ruby world. As amazing as that is, installing gems can be a time-consuming and even error-prone process. (Just ask the Travis guys.) In this talk, you'll learn about the recent dramatic changes in Rubygems and Bundler to improve speed and reliability by rewriting the Rubygems client/server architecture. I'll show how the new system caches more information, makes fewer requests, and takes less time to install gems. Finally, I'll cover how the changes allow worldwide mirrors of rubygems.org, improving things for Rubyists around the globe.

      %li.speaker
        .rounded
          %a{href: '#speaker4', rel: 'speaker_image', class: 'fancybox'}
            = image_tag "speakers/2014/mmongeau.jpg"
          %a{:href=>"https://twitter.com/halogenandtoast", :class=>"twitter"}= image_tag "twitter.png"
          %a{:href=>"https://github.com/halogenandtoast", :class=>"github"}= image_tag "github.png"
        %h2
          %a{href: '#speaker4', rel: 'speakers', class: 'fancybox'} Matthew Mongeau
        %p The Art of Ruby

        #speaker4.detail
          .links.right
            %a{:href=>"https://twitter.com/halogenandtoast", :class=>"twitter"}= image_tag "twitter.png"
            %a{:href=>"https://github.com/halogenandtoast", :class=>"github"}= image_tag "github.png"
          .name
            = image_tag "speakers/2014/mmongeau.jpg"
            %h2 Matthew Mongeau
          .inner
            %p I've programming in Ruby and Ruby on Rails since late 2004 when the first 15 minute blog video hit the web. Forever changed by brief introduction to Rails I've spent the last 9 years honing my craft. I eventually found myself at thoughtbot where I currently spread the knowledge of Ruby to others by teaching workshops both online and in person.
            %h3 The Art of Ruby
            %p We should all be artists in our craft, but there is a balance between expressiveness and performance. This talk is about finding that balance and producing beautiful code that doesn't sacrifice syntax for speed. I'll explore real world examples of code and mold them into something far more expressive. During the process we'll take a look at how common design patterns are applied to larger applications and examine the repercussions.

      %li.speaker
        .rounded
          %a{href: '#speaker5', rel: 'speaker_image', class: 'fancybox'}
            = image_tag "speakers/2014/daniel.jpg"
          %a{:href=>"https://twitter.com/dasch", :class=>"twitter"}= image_tag "twitter.png"
          %a{:href=>"https://github.com/dasch", :class=>"github"}= image_tag "github.png"
        %h2
          %a{href: '#speaker5', rel: 'speakers', class: 'fancybox'} Daniel Schierbeck
        %p Curly — Refactoring the view layer

        #speaker5.detail
          .links.right
            %a{:href=>"https://twitter.com/dasch", :class=>"twitter"}= image_tag "twitter.png"
            %a{:href=>"https://github.com/dasch", :class=>"github"}= image_tag "github.png"
          .name
            = image_tag "speakers/2014/daniel.jpg"
            %h2 Daniel Schierbeck
          .inner
            %p Daniel Schierbeck has been programming in Ruby since 2005 after completing level 99 in PHP and figuring out there was no prize to win after all.
            %p He studied Computer Science at the University of Copenhagen, where he primarily spent his time trying to avoid writing C++. He got into Concurrent Sequential Processes before it became cool, and wrote a Ruby implementation called Minx for his bachelor thesis. As with all academic code, it is used by no one.
            %p He currently pumps out pull requests for a living at Zendesk, a San Francisco based Customer Support Software SaaS company.
            %h3 Curly — Refactoring the view layer
            %p While most parts of Rails have been thoroughly overhauled during the past few years, one part has stubbornly refused improvement. The view layer is still by default using ERB to transform your app’s objects into HTML. Though HAML has gained a lot of traction, it is not a fundamental shift away from ERB, but rather a preference for putting HTML in your Ruby rather than the other way around.
            %p More recent efforts in the realm of JavaScript have produced Mustache and its ambitious younger brother, Handlebars. While these are more radical in their attempt to separate structure and logic, they still do not feel like native Rails code.
            %p While trying to solve a seemingly unrelated problem we discovered a design that suddenly enabled us to move past the limitations of ERB. Though different only in subtle ways, it struck just the right balance between integration with Rails and separation of concerns. We called it Curly.
            %p I will show how we use the same old OO techniques that you already know to clean up our views, making them less prone to bugs, more readable, and more reusable.
            %p I’ll also show how a seemingly small change of our conceptual model enabled us to add advanced behavior to our view layer without ending with an unmaintainable mess.
            %p Curly is open source and available at http://github.com/zendesk/curly

      %li.speaker
        .rounded
          %a{href: '#speaker6', rel: 'speaker_image', class: 'fancybox'}
            = image_tag "speakers/2014/lance.jpg"
          %a{:href=>"https://twitter.com/lgleasain", :class=>"twitter"}= image_tag "twitter.png"
          %a{:href=>"https://github.com/lgleasain", :class=>"github"}= image_tag "github.png"
        %h2
          %a{href: '#speaker6', rel: 'speakers', class: 'fancybox'} Lance Gleason
        %p Analytics for the Busy Ruby Developer

        #speaker6.detail
          .links.right
            %a{:href=>"https://twitter.com/lgleasain", :class=>"twitter"}= image_tag "twitter.png"
            %a{:href=>"https://github.com/lgleasain", :class=>"github"}= image_tag "github.png"
          .name
            = image_tag "speakers/2014/lance.jpg"
            %h2 Lance Gleason
          .inner
            %p Lance has been a computer nut ever since his dad bought him a VIC 20 in the 1980s. After nearly a decade as a Java developer for companies like Kodak, CNN, and GE, he decided to end his addiction to heavy inheritance, static typing, and coding without tests. These days, he practices clean Ruby living with lots of well-tested code, class composition, and fun dynamic languages as a developer/startup CTO for hire with extensive experience in data science and committer on open source projects such as the Passbook-iOS, Asari and Active Asari Gems. He is known to practice interspecies pair (purr) programming with his orange tabby, Allie, and when he's not writing code, you will find him diving with sharks, trekking through Chernobyl, sampling wine, cheering on the Springboks or perfecting his biltong recipe.
            %h3 Analytics for the Busy Ruby Developer
            %p Our applications have the potential to produce a lot of data. Every time a user clicks a button, buys something, or our application does any number of things we have the opportunity to gain useful insights. But where do you begin? Should I gather every data point I can think of? What tools work the best? There is a lot of talk and hype about analytics. In this session, let's take a look at what goes into mining data and analyzing the insights. We'll discuss different approaches to gathering, storing, and querying data, how to determine the KPIs to focus on, and how to interpret and use information in meaningful ways. While you may not be a statistician, see how some basic statistics can help you to start to wrangle your data.

      %li.speaker
        .rounded
          %a{href: '#speaker7', rel: 'speaker_image', class: 'fancybox'}
            = image_tag "speakers/2014/zachary.jpg"
          %a{:href=>"https://twitter.com/_zzak", :class=>"twitter"}= image_tag "twitter.png"
          %a{:href=>"https://github.com/zzak", :class=>"github"}= image_tag "github.png"
        %h2
          %a{href: '#speaker7', rel: 'speakers', class: 'fancybox'} Zachary Scott
        %p Contributing to Ruby

        #speaker7.detail
          .links.right
            %a{:href=>"https://twitter.com/_zzak", :class=>"twitter"}= image_tag "twitter.png"
            %a{:href=>"https://github.com/zzak", :class=>"github"}= image_tag "github.png"
          .name
            = image_tag "speakers/2014/zachary.jpg"
            %h2 Zachary Scott
          .inner
            %p Zachary Scott has been a Ruby committer since 2012 and will share his experiences with contributing to CRuby.
            %h3 Contributing to Ruby
            %p Newcomer or seasoned veteran looking to get involved with Ruby documentation?
            %p The path to eternal gratification can seem like a scary one, but we'll show you it's alot easier than you thought. Writing documentation is a great way to give back to the open source community and build your Ruby skills and fundamentals.
            %p This talk will teach you the value of open-source, the benefits of contributing, and a little bit about how ruby-core works. You will learn what to look for when spotting documentation bugs in the CRuby source code. We will cover the guidelines to writing CRuby documentation, and how to submit a patch.

      %li.speaker
        .rounded
          %a{href: '#speaker8', rel: 'speaker_image', class: 'fancybox'}
            = image_tag "speakers/2014/sallylehman.jpg"
          %a{:href=>"https://twitter.com/SllyLhmn", :class=>"twitter"}= image_tag "twitter.png"
          %a{:href=>"https://github.com/rothsa", :class=>"github"}= image_tag "github.png"
        %h2
          %a{href: '#speaker8', rel: 'speakers', class: 'fancybox'} Sally Lehman
        %p Email Delivery for Rails Folks (or 'How to send lots of email and not look like spam')

        #speaker8.detail
          .links.right
            %a{:href=>"https://twitter.com/SllyLhmn", :class=>"twitter"}= image_tag "twitter.png"
            %a{:href=>"https://github.com/rothsa", :class=>"github"}= image_tag "github.png"
          .name
            = image_tag "speakers/2014/sallylehman.jpg"
            %h2 Sally Lehman
          .inner
            %p I grew up in various small towns in Oregon and Washington., and now live in the Pearl District of Portland, Oregon, USA. My first computer experiences were with EMACs, MS-DOS, and Ski Free at age <= 5.
            %p At Github, I'm currently making improvements to email delivery, reputation and infrastructure, so that emails get delivered reliably and fast. I worked at Mad Mimi prior to this since 2009, focusing on email delivery there as well.
            %p My favorite movie is Office Space, and I make a mean Tiramisu.
            %h3 Email Delivery for Rails Folks (or 'How to send lots of email and not look like spam')
            %p This talk will focus more on the delivery aspects of sending lots of email while including some basic configuration for Linux, Rails, & Postfix.
            %ul.list
              %li How to send lots of email and not look like spam.
              %li What You Don't Know About Sending Email
              %li Most People Who Send Lots of Email, are Sending Spam.
              %li Make Sure You're not Sending Spam
              %li Make Sure the Gatekeepers you're Sending to Know Who You Are
              %li Make Sure You're Using the Right Tools for the Job
              %li Gather Feedback From the People You are Sending to, and Act on it
              %li How to comfortably forget most of what I said here (except for the not sending spam part)
              %li Helpful Links

      %li.speaker
        .rounded
          %a{href: '#speaker9', rel: 'speaker_image', class: 'fancybox'}
            = image_tag "speakers/2014/johnanderson.jpg"
          %a{:href=>"https://www.twitter.com/djellemah", :class=>"twitter"}= image_tag "twitter.png"
          %a{:href=>"https://www.github.com/djellemah", :class=>"github"}= image_tag "github.png"
        %h2
          %a{href: '#speaker9', rel: 'speakers', class: 'fancybox'} John Anderson
        %p What is an object, really?

        #speaker9.detail
          .links.right
            %a{:href=>"https://www.twitter.com/djellemah", :class=>"twitter"}= image_tag "twitter.png"
            %a{:href=>"https://www.github.com/djellemah", :class=>"github"}= image_tag "github.png"
          .name
            = image_tag "speakers/2014/johnanderson.jpg"
            %h2 John Anderson
          .inner
            %p Ruby fan since 2004, Rails since 2005. Code since 1989. HTML since 3.2 was shiny and new. Javascript for too long. BSc Computer Science and Economics. Also studied Philosophy, Physics, Comparative Literature and Music.
            %h3 What is an object, really?
            %p OR
            %h3 When is an object actually a function?
            %p Programming languages exist to allow programmers to make sense of complex real-world problems. What real world scenarios lend themselves to modelling by objects, and which to functions?
            %p The first time I met objects was in Turbo Pascal in about 1990. I was completely baffled. I eventually got comfortable with objects in c++, and had that turned on its head by Smalltalk. Then Java objects came along and made me write too much code. Ruby was a breath of fresh air, but it took me 8 years before I really grokked the object model in Ruby. Lately with all the interest in functional languages, I've been glimpsing some overlaps between functions and objects.
            %p I'm still not sure if CLOS is a good idea though.
            %p Accompanied by real-world code examples in Ruby, naturally.

      %li.speaker
        .rounded
          %a{href: '#speaker10', rel: 'speaker_image', class: 'fancybox'}
            = image_tag "speakers/2014/rory.jpg", :class => 'bg'
          %a{:href=>"https://twitter.com/rorymckinley", :class=>"twitter"}= image_tag "twitter.png"
          %a{:href=>"https://github.com/rorymckinley", :class=>"github"}= image_tag "github.png"
        %h2
          %a{href: '#speaker10', rel: 'speakers', class: 'fancybox'} Rory McKinley
        %p TDD: When the thrill has gone

        #speaker10.detail
          .links.right
            %a{:href=>"https://twitter.com/rorymckinley", :class=>"twitter"}= image_tag "twitter.png"
            %a{:href=>"https://github.com/rorymckinley", :class=>"github"}= image_tag "github.png"
          .name
            = image_tag "speakers/2014/rory.jpg"
            %h2 Rory McKinley
          .inner
            %p Rory wishes he had spent all his time since the last Rubyfuza working on a bio that would make him sound awesome. In reality there is not enough time in the world for that :).
            %p Rory is lucky enough to work with smart, passionate people who want to make a difference. He has been writing software for more than 10 years, and he believe that all he needs is a few more years of psychotherapy and he will forget all the terrible, terrible code he has written in that decade.
            %h3 TDD: When the thrill has gone
            %p I have been doing TDD for several years and of late, I have been left with the feeling that I am missing some key part of the value that it supposed to offer. This talk will cover some (not enough time for all) of the n00b mistakes I have made in the past, and I will try and present a TDD strategy that works for me and may help inform improvements in the way others approach their tests.

      %li.speaker
        .rounded
          %a{href: '#speaker14', rel: 'speaker_image', class: 'fancybox'}
            = image_tag "speakers/2014/kevin.jpg", :class => 'bg'
          %a{:href=>"https://twitter.com/kmckelvin", :class=>"twitter"}= image_tag "twitter.png"
          %a{:href=>"https://github.com/kmckelvin", :class=>"github"}= image_tag "github.png"
        %h2
          %a{href: '#speaker14', rel: 'speakers', class: 'fancybox'} Kevin McKelvin
        %p Clean Code: Applying Object Oriented Principles

        #speaker14.detail
          .links.right
            %a{:href=>"https://twitter.com/kmckelvin", :class=>"twitter"}= image_tag "twitter.png"
            %a{:href=>"https://github.com/kmckelvin", :class=>"github"}= image_tag "github.png"
          .name
            = image_tag "speakers/2014/kevin.jpg"
            %h2 Kevin McKelvin
          .inner
            %p Kevin is a Ruby developer at Platform45. He began his career working with C#, but made the switch to Ruby in 2011 and hasn't looked back since. He has strange obsessions with vim, code quality and guitars.
            %h3 Clean Code: Applying Object Oriented Principles
            %p Ruby gives us a lot of freedom when expressing code and draws features from various paradigms, but it's an object oriented language at heart. In this session we'll go back to first principles of object oriented programming and see how applying object inheritance, polymorphism and a bit of discipline can translate into an understandable and maintainable codebase.

      %li.speaker
        .rounded
          %a{href: '#speaker11', rel: 'speaker_image', class: 'fancybox'}
            = image_tag "speakers/2014/simon.jpg", :class => 'bg'
          %a{:href=>"https://twitter.com/siefi", :class=>"twitter"}= image_tag "twitter.png"
          %a{:href=>"https://github.com/sighmin", :class=>"github"}= image_tag "github.png"
        %h2
          %a{href: '#speaker11', rel: 'speakers', class: 'fancybox'} Simon van Dyk
        %p The Birds &amp; The Bees

        #speaker11.detail
          .links.right
            %a{:href=>"https://twitter.com/siefi", :class=>"twitter"}= image_tag "twitter.png"
            %a{:href=>"https://github.com/sighmin", :class=>"github"}= image_tag "github.png"
          .name
            = image_tag "speakers/2014/simon.jpg"
            %h2 Simon van Dyk
          .inner
            %p Hi There I'm Simon. My number one goal is to love my work. I love building robust, innovative, and creative systems with imaginative people.
            %p I'm a fan of beautiful interfaces, usable and intuitive software. Software has such great potential to change the way that people live. Recently my love for AI and it's potential to solve some of the world's biggest problems is very quickly becoming my life long goal, to add value to peoples lives with the power of technology and software.
            %h3 The Birds &amp; The Bees
            %p An overview of computational intelligence (AI) paradigms focusing on their practical applications, the joy of programming in metaphors (birds, bees, ants etc). I'll introduce each paradigm in {neural networks, fuzzy systems, artificial immume systems, swarm intelligence and evolutionary computation} but focus on swarm intelligence and go through examples, like, simple data clustering using ants.

      %li.speaker
        .rounded
          %a{href: '#speaker12', rel: 'speaker_image', class: 'fancybox'}
            = image_tag "speakers/2014/Robert_Stuttaford.JPG", :class => 'bg'
          %a{:href=>"https://twitter.com/RobStuttaford", :class=>"twitter"}= image_tag "twitter.png"
          %a{:href=>"https://github.com/robert-stuttaford", :class=>"github"}= image_tag "github.png"
        %h2
          %a{href: '#speaker12', rel: 'speakers', class: 'fancybox'} Robert Stuttaford
        %p Immutable Data...base?

        #speaker12.detail
          .links.right
            %a{:href=>"https://twitter.com/RobStuttaford", :class=>"twitter"}= image_tag "twitter.png"
            %a{:href=>"https://github.com/robert-stuttaford", :class=>"github"}= image_tag "github.png"
          .name
            = image_tag "speakers/2014/Robert_Stuttaford.JPG"
            %h2 Robert Stuttaford
          .inner
            %p Robert Stuttaford is the CTO at Cognician, a local tech startup working on improving people's thinking. Now, well into its fourth year with a brand new, completely re-imagined technology stack, Cognician is providing value as a digital platform for self-coaching, performance support and much, much more.
            %p Robert has been coding for 15 years and is still not dead. Having worked in all facets of web development for a wide variety of use cases and people, he is happily astonished at how much fun he's still having, thanks in no small part to the Clojure language and its philosophy and community.
            %h3 Immutable Data...base?
            %p We’ll take a whirlwind tour through Clojure - the rapidly rising functional language on the JVM - and Datomic, a novel take on immutable databases. We’ll see how the notion of immutability makes life as a working programmer a lot easier in Clojure, and in Datomic, how it becomes possible to query the past, query against what-if databases, query across databases, and more.

    %div.clearfix
    %ul
      %li.speaker
        .rounded
          %a{href: '#speaker13', rel: 'speaker_image', class: 'fancybox'}
            = image_tag "speakers/2014/marie.jpg", :class => 'bg'
          %a{:href=>"https://twitter.com/mariebeetge", :class=>"twitter"}= image_tag "twitter.png"
          %a{:href=>"https://github.com/mariebeetge", :class=>"github"}= image_tag "github.png"
        %h2
          %a{href: '#speaker13', rel: 'speakers', class: 'fancybox'} Marié Whittington
        %p Designing in a Rails Company

        #speaker13.detail
          .links.right
            %a{:href=>"https://twitter.com/mariebeetge", :class=>"twitter"}= image_tag "twitter.png"
            %a{:href=>"https://github.com/mariebeetge", :class=>"github"}= image_tag "github.png"
          .name
            = image_tag "speakers/2014/marie.jpg"
            %h2 Marié Whittington
          .inner
            %p I'm a designer and illustrator based in Johannesburg, South Africa. I studied Graphic Design for 4 years at the University of Stellenbosch. I am currently working at Platform45 as a senior designer.
            %h3 Designing in a Rails Company
            %p In this talk I will run through some of the things I’ve learned while working in this environment and hopefully it will give developers a bit of insight into our design/development relationships and process and how we use Rails as a design tool

      %li.speaker
        .rounded
          %a{href: '#speaker15', rel: 'speaker_image', class: 'fancybox'}
            = image_tag "speakers/2014/nelson.jpg", :class => 'bg'
          %a{:href=>"https://twitter.com/foomip", :class=>"twitter"}= image_tag "twitter.png"
          %a{:href=>"https://github.com/foomip", :class=>"github"}= image_tag "github.png"
        %h2
          %a{href: '#speaker15', rel: 'speakers', class: 'fancybox'}
            Nelson Pascoal
        %p Rubymotion - iOS and OSX development from a Ruby developer's perspective

        #speaker15.detail
          .links.right
            %a{:href=>"https://twitter.com/foomip", :class=>"twitter"}= image_tag "twitter.png"
            %a{:href=>"https://github.com/foomip", :class=>"github"}= image_tag "github.png"
          .name
            = image_tag "speakers/2014/nelson.jpg"
            %h2
              Nelson Pascoal
          .inner
            %p I've been working as a Software Developer for about 9 years now and doing Ruby (and Rails) development for about 4 years. I love to learn new things and am always looking for a new challenge.
            %p I've been wanting to get into mobile software development for some time now. The possibilities around taking computing away from the desktop, and along with you into your life, really excite me.
            %h3 Rubymotion - iOS and OSX development from a Ruby developer's perspective
            %p Rubymotion provides a unique opportunity for those developers looking for an alternative to Objective-C. Start building native applications for the Apple eco-system! This sounds great from a high-level perspective, but there are some caveats that you have to be aware of.
            %p This talk will be a high level view of:
            %ul.list
              %li What is Rubymotion?
              %li Comparing Objective-C code to Ruby, with respect to accessing the various iOS and OSX SDKs.
              %li The on-going efforts to make Rubymotion development more "Ruby-like".
              %li The advantages and disadvantages of the various tools available for developing Rubymotion apps.
              %li Various small demos to show the power of building native iOS apps.
              %li And some other interesting stuff too :)

      %li.speaker
        .rounded
          %a{href: '#speaker16', rel: 'speaker_image', class: 'fancybox'}
            = image_tag "speakers/2014/murtuza.JPG", :class => 'bg'
          %a{:href=>"https://twitter.com/murtazz", :class=>"twitter"}= image_tag "twitter.png"
          %a{:href=>"https://github.com/murtuzakz", :class=>"github"}= image_tag "github.png"
        %h2
          %a{href: '#speaker16', rel: 'speakers', class: 'fancybox'} Murtuza Kutub
        %p The Ultimate Refactoring Cheat Sheet

        #speaker16.detail
          .links.right
            %a{:href=>"https://twitter.com/murtazz", :class=>"twitter"}= image_tag "twitter.png"
            %a{:href=>"https://github.com/murtuzakz", :class=>"github"}= image_tag "github.png"
          .name
            = image_tag "speakers/2014/murtuza.JPG"
            %h2 Murtuza Kutub
          .inner
            %p I would like to think of myself as an intermediate Ruby/Rails developer. I am always looking to learn new technologies, and meeting interesting folks.
            %p I have worked as a Senior Rails developer at fab.com, and prior to that at Zynga.
            %h3 The Ultimate Refactoring Cheat Sheet
            %p The 'Get Shit Done' philosophy embraced at most startups, sometimes leads to bad, ugly, stinking code (its not your fault, you din't have enough time :) ).
            %p So what do we do now? We wear our gas masks, grab the refactoring cheat sheet, and get hands down dirty into the shittiest code we have written, and we clean it up. We keep cleaning till it smells of jasmines.
            %p And we come out with battle scars on our faces and a sense of accomplishment in our hearts.

      %li.speaker
        .rounded
          %a{href: '#speaker17', rel: 'speaker_image', class: 'fancybox'}
            = image_tag "speakers/2014/ben.JPG", :class => 'bg'
          / %a{:href=>"https://twitter.com/beanstalksurf", :class=>"twitter"}= image_tag "twitter.png"
          %a{:href=>"https://github.com/BenJanecke", :class=>"github"}= image_tag "github.png"
        %h2
          %a{href: '#speaker17', rel: 'speakers', class: 'fancybox'} Ben Janecke
        %p Ping Ping or: How I learned to stop worrying and love remote paring

        #speaker17.detail
          .links.right
            / %a{:href=>"https://twitter.com/beanstalksurf", :class=>"twitter"}= image_tag "twitter.png"
            %a{:href=>"https://github.com/BenJanecke", :class=>"github"}= image_tag "github.png"
          .name
            = image_tag "speakers/2014/ben.JPG"
            %h2 Ben Janecke
          .inner
            %p I believe that the workplace should be a place you love to be and that the code you create with your team should make you smile.
            %p I spend my waking hours @UBXD and my free time buried in SciFi books.
            %h3 Ping Ping or: How I learned to stop worrying and love remote paring
            %p This talk is about paring and it is not about why you should pair. It is about how to pair effectively when someone is not sat right next to you.

      %li.speaker
        .rounded
          %a{href: '#speaker18', rel: 'speaker_image', class: 'fancybox'}
            = image_tag "speakers/2014/tania.jpg", :class => 'bg'
          / %a{:href=>"https://twitter.com/aslamkhn", :class=>"twitter"}= image_tag "twitter.png"
          / %a{:href=>"https://github.com/aslamkhn", :class=>"github"}= image_tag "github.png"
        %h2
          %a{href: '#speaker18', rel: 'speakers', class: 'fancybox'} Tania van Wyk de Vries
        %p Ruby on Microsoft Azure

        #speaker18.detail
          .links.right
            / %a{:href=>"https://twitter.com/aslamkhn", :class=>"twitter"}= image_tag "twitter.png"
            / %a{:href=>"https://github.com/aslamkhn", :class=>"github"}= image_tag "github.png"
          .name
            = image_tag "speakers/2014/tania.jpg"
            %h2 Tania van Wyk de Vries
          .inner
            %p Tania is the brainchild behind Infoware Studios and its innovative solutions. She has headed up a number of small businesses prior to starting Infoware Studios and this is 3rd time lucky. She is a serial entrepreneur and loves building software products. Tania brings with her a passion for Software, Mentoring and 15 years in IT. She has experience in various roles ranging from developer, business analyst, development manager, CTO and CIO (acting).  At the moment her focus is on growing people on a personal level at Infoware Studios, letting people face their dragons. She is also passionate about assisting other entrepreneurs to succeed.
            %h3 Ruby on Microsoft Azure
            %p The open source community is known for resisting anything Microsoft. We will convince you otherwise. We will share the hosting options for Tenderware (http://tenderware.co.za) on Microsoft Azure as our preferred cloud platform.

      %li.speaker
        .rounded
          %a{href: '#speaker19', rel: 'speaker_image', class: 'fancybox'}
            = image_tag "speakers/2014/danieroux.jpg", :class => 'bg'
          %a{:href=>"https://twitter.com/danieroux", :class=>"twitter"}= image_tag "twitter.png"
          %a{:href=>"https://github.com/danieroux", :class=>"github"}= image_tag "github.png"
        %h2
          %a{href: '#speaker19', rel: 'speakers', class: 'fancybox'} Danie Roux
        %p Persistent data structures - good for UI

        #speaker19.detail
          .links.right
            %a{:href=>"https://twitter.com/danieroux", :class=>"twitter"}= image_tag "twitter.png"
            %a{:href=>"https://github.com/danieroux", :class=>"github"}= image_tag "github.png"
          .name
            = image_tag "speakers/2014/danieroux.jpg"
            %h2 Danie Roux
          .inner
            %p People person, change agent. Journeyer through problem and solution space. Interested in being interested.
            %p Independent consultant on the Why and How of value creation.
            %h3 Persistent data structures - good for UI
            %p Persistent data structures are being imported from the FP world.
            %p What makes persistent data structures particularly interesting is that they cannot be modified in the traditional sense. These structures can model a timeline of changes quite naturally since every "change" creates a new "copy".
            %p "Functional Reactive Programming" is another old/new idea. FRP has a time centric viewpoint.
            %p Having persistent data structures on the Javascript/UI side of the world unlocks a lot of the magic that FRP has to offer.
            %p In this talk Danie will explain why persistent data structures are good and specifically why they are good for (the) UI.

      %li.speaker
        .rounded
          %a{href: '#speaker20', rel: 'speaker_image', class: 'fancybox'}
            = image_tag "speakers/2014/richard.jpg", :class => 'bg'
          / %a{:href=>"https://twitter.com/luke_randall", :class=>"twitter"}= image_tag "twitter.png"
          / %a{:href=>"https://github.com/lukerandall", :class=>"github"}= image_tag "github.png"
        %h2
          %a{href: '#speaker20', rel: 'speakers', class: 'fancybox'} Richard Cochrane
        %p Debugging in Ruby on Rails

        #speaker20.detail
          .links.right
            / %a{:href=>"https://twitter.com/luke_randall", :class=>"twitter"}= image_tag "twitter.png"
            / %a{:href=>"https://github.com/lukerandall", :class=>"github"}= image_tag "github.png"
          .name
            = image_tag "speakers/2014/richard.jpg"
            %h2 Richard Cochrane
          .inner
            %p I worked for many years in Visual Basic 6, then, in 2008, changed jobs resulting in a magical transformation of my career. A patient guy took me under his wing and taught me Linux, Python, Django, MVC and developing the full web stack. That was almost 5 years ago. Last year, I took a job as a Ruby/Rails Developer and I've learnt a lot about developing the Rails way (services, policies, etc). Learning another framework is hugely challenging but interesting in allowing you to see how the same problems can be solved in different ways (routing, controllers, template rendering, etc.).
            %h3 Debugging in Ruby on Rails
            %p Great tools are key to great development and an awesome console and interactive debugger are up there on the list of tools EVERY developer should have access to. In particular, Pry and the Jazz Hands bundle that includes a few goodies with Pry (mostly, other Pry plugins) bring a very useful console for code exploration and a debugger that you can enter during any code execution, whether the app is running daemonised or not. It's not hard to use Pry but I'm astonished by how many developers deprive themselves of this absolute must-have tool.

      %li.speaker
        .rounded
          %a{href: '#speaker2', rel: 'speaker_image', class: 'fancybox'}
            = image_tag "speakers/2014/dan.jpg"
          / %a{:href=>"https://twitter.com/myabc", :class=>"twitter"}= image_tag "twitter.png"
          / %a{:href=>"https://github.com/myabc", :class=>"github"}= image_tag "github.png"
        %h2
          %a{href: '#speaker2', rel: 'speakers', class: 'fancybox'} Daniel Acton
        %p Google APIs for Ruby on Ruby on Rails on Google Compute Engine

        #speaker2.detail
          .links.right
            %a{:href=>"https://twitter.com/myabc", :class=>"twitter"}= image_tag "twitter.png"
            %a{:href=>"https://github.com/myabc", :class=>"github"}= image_tag "github.png"
          .name
            = image_tag "speakers/2014/dan.jpg"
            %h2 Daniel Acton
          .inner
            %p Technical Solutions Consultant, Publisher and Distribution Solutions, Google South Africa
            %p Daniel is a Technical Solutions Consultant on the Publisher and Distribution Solutions team at Google South Africa. In this role, he focuses on helping partners implement Google's products, specifically Google's monetization products. Daniel also works with developer and entrepreneur groups in South Africa as part of Google's Developer Relations programmes.
            %p Daniel holds a M.Sc from the University of Pretoria. He earned a bachelor's degree in Computer Science from the University of Cape Town, where he graduated with honours.
            %h3 Google APIs for Ruby on Ruby on Rails on Google Compute Engine

    / %div.clearfix
    / = partial('../global/signup')
    /   %div.center
    /     %h2 You?
    /     %p
    /       We're looking for Lightning Talks!
    /       %br
    /       = link_to "I want to speak", "http://rubyfuza.wufoo.com/forms/rubyfuza-2013-lightning-talk-proposal/", :class => "hot"
